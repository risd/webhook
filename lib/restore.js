'use strict';

var fs    = require('fs');
var async = require('async');

require('colors');

var inquirer = require('inquirer');
var firebaseLogin = require('./firebase-login');
console.warn = function() {};
var firebase = require('firebase');
var firebaseRoot = null;

module.exports = function (all, options) {

  // Set of basic configuration for this (Defaults)
  var config = {
    firebaseConfig: '.firebase.conf',
    firebaseName: options.firebase || 'webhook',
    fromFile: options.fromFile || '.preset-data.json',
    webhookUsername: options.email ? options.email.toLowerCase() : '',
    webhookEscapedUsername: '',
    webhookPassword: '',
    confData: {},
    typeData: {},
    realData: {},
    settingsData: {},
    firebaseToken: options.token || '',
  };

  firebaseLogin.setFirebaseName(config.firebaseName);

  firebaseRoot = new firebase('https://' + config.firebaseName + '.firebaseio.com/');

  async.series([

    function (step) {
      console.log('Reading Config'.green);
      if (!fs.existsSync('.firebase.conf')) {
        console.log('No webhook configuration found.'.red);
        console.log('This command must be run from inside of a webhook site directory'.red);
        process.exit(1);
      }

      var data = fs.readFileSync('.firebase.conf');
      config.confData = JSON.parse(data.toString());
      step();
    },

    function(step) {

      if(config.firebaseToken) {
        config.webhookEscapedUsername = config.webhookUsername.replace(/\./g, ',1');
        step();
        return;
      }

      getUserLoginInformation('Webhook', function(username, password) {
        config.webhookUsername = username.toLowerCase();
        config.webhookEscapedUsername = username.toLowerCase().replace(/\./g, ',1');
        config.webhookPassword = password;
        step();
      });
    },

    function(step) {

      if(config.firebaseToken) {
        step();
        return;
      }

      firebaseLogin.login(config.webhookUsername, config.webhookPassword, function(err, user) {
        if(err && err.code === 'INVALID_USER')
        {
          if(config.webhookPassword === '') {
            console.log('\n========================================================'.red);
            console.log('# Password is incorrect                                  #'.red);
            console.log('========================================================'.red);
            console.log('# You need to set a real password, it can\'t be empty'.red);
            console.log('# ---------------------------------------------------- #'.red);
          } else {
            console.log('To create an account, try `wh create` or get invited to'.blue);
            console.log('work on an existing site.'.blue);
          }
          process.exit(1);
        } else if (err) {
          if(err.code && err.code === 'INVALID_PASSWORD') {
            console.log('\n========================================================'.red);
            console.log('# Password is incorrect                                #'.red);
            console.log('========================================================'.red);
            console.log('# Please doublecheck your records. You can change your password at:.'.red);
            console.log('# http://www.webhook.com/secret/password-reset/'.yellow);
            console.log('# ---------------------------------------------------- #'.red);
          } else {
            console.log(err.message.red);
          }

          process.exit(1);
        } else {
          config.firebaseToken = user.token;
          step();
        }
      })
    },

    function (step) {
      firebaseRoot.auth(config.firebaseToken, function(error, auth) {
        if(error) {
          process.exit(2);
        }
        step();
      });
    },

    function (step) {
      console.log('Reading Data'.green);
      if (!fs.existsSync(config.fromFile)) {
        console.log('No webhook back data found.'.red);
        console.log('This command must be run from inside of a webhook site directory'.red);
        console.log('The directory must have a ' + config.fromFile + '  file.'.red);
        console.log('.preset-data.json can be generated by running `wh backup`.'.red);
        process.exit(1);
      }

      var backup = JSON.parse(fs.readFileSync(config.fromFile).toString());
      config.realData = backup.data || {};
      config.typeData = backup.contentType || {};
      config.settingsData = backup.settings || {};
      step();
    },

    function (step) {
      console.log('Writing Data'.green);
      firebaseRoot.child('buckets/' + config.confData.siteName + '/' + config.confData.secretKey + '/dev/data')
        .set(config.realData, function (err) {
          if(err) console.log(err);
          step();
        });
    },

    function (step) {
      console.log('Writing Content Types'.green);
      firebaseRoot.child('buckets/' + config.confData.siteName + '/' + config.confData.secretKey + '/dev/contentType')
        .set(config.typeData, function (err) {
          if(err) console.log(err);
          step();
        });
    },

    function (step) {
      console.log('Writing Site Settings'.green);
      firebaseRoot.child('buckets/' + config.confData.siteName + '/' + config.confData.secretKey + '/dev/settings')
        .set(config.settingsData, function (err) {
          if(err) console.log(err);
          step();
        });
    },

  ], function () {
    process.exit(0);
  });
};


function getUserLoginInformation(service, callback) {
  var username = '';
  var password = '';

  inquirer.prompt({
    type: 'input',
    name: 'username',
    message: 'Enter your ' + service + ' email:',
  }, function (answer) {
    username = answer.username;

    function promptPassword(cb) {
      inquirer.prompt({
        type: 'password',
        name: 'password',
        message: 'Enter your ' + service +' password:',
      }, function (answer) {
        password = answer.password;
        if(password.trim() === '') {
          console.log('\n========================================================'.red);
          console.log('# No password entered, please re-enter                 #'.red);
          console.log('========================================================'.red);
          promptPassword(cb);
        } else {
          cb(password);
        }
      }); 
    }

    promptPassword(function(password) {
      callback(username, password)
    });
  });
}