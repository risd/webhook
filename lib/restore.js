'use strict'

require( 'colors' )

var fs    = require( 'fs' )
var async = require( 'async' )

var Firebase = require( './util/firebase/index' )
var firebaseTokenAuthStep = require( './util/firebase/token-auth' ).step
var getUserLoginInformationStep = require( './util/get-user-login-information' ).step
var firebaseLoginUserStep = require( './util/firebase/login-user' ).step

var ensureSiteNameAndKeyExistStep = require( './util/ensure-site-name-and-key-exist' ).step

var functor = require( './util/functor' )
var exitCallback = require( './util/exit-callback' )
var GetSetDefault = require( './util/get-set-default' )

module.exports = function Restore ( options, callback ) {
  if ( typeof callback !== 'function' ) callback = exitCallback;

  var firebase = Firebase( options )

  // Set of basic configuration for this (Defaults)
  var config = {
    fromFile: options.fromFile || 'backup.json',
    firebaseName: options.firebaseName || 'webhook',
    firebaseAPIKey: options.firebaseAPIKey,
    firebaseToken: options.firebaseToken,
    firebase: firebase,
    webhookUsername: options.email ? options.email.toLowerCase() : '',
    webhookEscapedUsername: '',
    webhookPassword: options.password,
    platformName: options.platformName || 'webhook',
  }

  if ( ! fs.existsSync( config.fromFile ) ) {
    var errorMessage = [
      'No webhook back data found.',
      'This command must be run from inside of a webhook site directory',
      'The directory must have a ' + config.fromFile + '  file.',
      '.preset-data.json can be generated by running `wh backup`.'
    ].join( '\n' )

    return callback( new Error( errorMessage ) )
  }

  var configFn = functor( config )

  var restoreData = GetSetDefault( {} )

  async.series([
    ensureSiteNameAndKeyExistStep.bind( null, configFn ),
    firebaseTokenAuthStep.bind( null, configFn ),
    getUserLoginInformationStep.bind( null, configFn ),
    firebaseLoginUserStep.bind( null, configFn ),
    restoreDataStep,
    writeDataStep,
    writeContentTypesStep,
    writeSettingsStep,
    writeDeploysStep,
  ], function () {
    callback()
  } )

  function restoreDataStep (step) {
    restoreData( readJson( config.fromFile ) )
    step()
  }

  function writeDataStep (step) {
    var data = restoreData().data;
    if ( ! data ) return step()

    console.log('Writing Data'.green);
    firebase.siteData( config, data )
      .then( function () { step() } )
      .catch( step )
  }

  function writeContentTypesStep (step) {
    var contentTypes = restoreData().contentType;
    if ( ! contentTypes ) return step()

    console.log('Writing Content Types'.green);
    firebase.siteContentTypes( config, contentTypes )
      .then( function () { step() } )
      .catch( step )
  }

  function writeSettingsStep (step) {
    var settings = restoreData().settings;
    if ( ! settings ) return step()

    console.log('Writing Site Settings'.green);
    firebase.siteSettings( config, settings )
      .then( function () { step() } )
      .catch( step )
  }

  function writeDeploysStep (step) {
    var deploys = restoreData().deploys;
    if ( ! deploys ) return step()

    console.log('Writing Site Deploys'.green);
    firebase.siteDeploys( config, deploys )
      .then( function () { step() } )
      .catch( step )
  }
}


function readJson (path) {
  return JSON.parse(stripBom(fs.readFileSync(path)));
}

function stripBom (content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  content = content.replace(/^\uFEFF/, '')
  return content
}
